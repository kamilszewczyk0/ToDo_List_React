{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fab5c7c.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent.trim() === \"\") {\r\n      return;\r\n    }\r\n    addNewTask(newTaskContent.trim());\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"section__form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        value={newTaskContent}\r\n        className=\"section__input\"\r\n        placeholder=\"What needs to be done?\"\r\n        onChange={({target}) => setNewTaskContent(target.value)}\r\n      />\r\n      <button className=\"section__btn\">Add task</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\r\n  <ul className=\"section__list\">\r\n    {tasks.map((task) => (\r\n      <li\r\n        key={task.id}\r\n        className={`task__item${\r\n          task.done && hideDone ? \" tasks__item--hidden\" : \"\"\r\n        }`}>\r\n        <button\r\n          onClick={() => toggleTaskDone(task.id)}\r\n          className=\"list__doneBtn \">\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </button>\r\n        <p className={`list__task${task.done ? \" list__task--done\" : \"\"}`}>\r\n          {task.content}\r\n        </p>\r\n        <button onClick={() => removeTask(task.id)} className=\"list__removeBtn\">\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({tasks, hideDone, toggleHideDone, setAllDone}) =>\r\n  tasks.length > 0 && (\r\n    <div className=\"buttons\">\r\n      <button className=\"buttons__button\" onClick={toggleHideDone}>\r\n        {hideDone ? \"Show\" : \"Hide\"} done tasks\r\n      </button>\r\n      <button\r\n        onClick={setAllDone}\r\n        className=\"buttons__button\"\r\n        disabled={tasks.every(({done}) => done)}>\r\n        Mark all as done\r\n      </button>\r\n    </div>\r\n  );\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n  <section className=\"section\">\r\n    <section className=\"section__header\">\r\n      <h2 className=\"section__title\">{title}</h2>\r\n      {extraHeaderContent}\r\n    </section>\r\n    {body}\r\n  </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({title}) => <h1 className=\"section__header--main\">{title}</h1>;\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({children}) => <main className=\"container\">{children}</main>;\r\n\r\nexport default Container;\r\n","import React, {useState} from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([\n    {id: 1, content: \"switch to React\", done: false},\n    {id: 2, content: \"eat the dinner\", done: true},\n  ]);\n\n  const toggleHideDone = () => {\n    setHideDone((hideDone) => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks((tasks) =>\n      tasks.map((task) =>\n        task.id === id ? {...task, done: !task.done} : task,\n      ),\n    );\n  };\n\n  const setAllDone = () => {\n    setTasks((tasks) => tasks.map((task) => ({...task, done: true})));\n  };\n\n  const addNewTask = (content) => {\n    setTasks((tasks) => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  return (\n    <Container>\n      <Header title=\"ToDo List\" />\n      <Section title=\"Add new task\" body={<Form addNewTask={addNewTask} />} />\n      <Section\n        title=\"Task List\"\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}