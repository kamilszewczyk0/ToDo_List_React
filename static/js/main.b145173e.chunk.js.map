{"version":3,"sources":["GlobalStyle.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","useLocalStorage.js","App.js","useTasks.js","serviceWorker.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","className","onSubmit","event","preventDefault","trim","current","focus","value","placeholder","onChange","target","ref","List","styled","ul","theme","colors","white","Item","li","hidden","css","Content","p","done","Button","button","DoneButton","RemoveButton","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","onClick","content","ButtonsContainer","div","breakpoints","mobile","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Main","main","Container","children","useLocalStorage","keyName","initialValue","localStorageState","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","App","setTasks","setHideDone","filter","useTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","teal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b145173e.chunk.js","sourcesContent":["import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*,\r\n::after,\r\n::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  background-color: #eeeeee;\r\n  font-family: \"Montserrat\", sans-serif;\r\n}\r\n\r\n`;\r\n","import React, {useState, useRef} from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const inputFocus = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent.trim() === \"\") {\r\n      return;\r\n    }\r\n    addNewTask(newTaskContent.trim());\r\n    setNewTaskContent(\"\");\r\n    inputFocus();\r\n  };\r\n\r\n  return (\r\n    <form className=\"section__form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        value={newTaskContent}\r\n        className=\"section__input\"\r\n        placeholder=\"What needs to be done?\"\r\n        onChange={({target}) => setNewTaskContent(target.value)}\r\n        ref={inputRef}\r\n      />\r\n      <button className=\"section__btn\">Add task</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, {css} from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  background-color: ${({theme}) => theme.colors.white};\r\n  list-style: none;\r\n  padding: 30px 25px;\r\n  margin: 2px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  margin: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({hidden}) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.p`\r\n  margin: 0;\r\n  flex-basis: 100%;\r\n  padding: 0 15px;\r\n  overflow-wrap: break-word;\r\n\r\n  ${({done}) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nconst Button = styled.button`\r\n  height: 30px;\r\n  width: 30px;\r\n  border: none;\r\n  color: ${({theme}) => theme.colors.white};\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  flex-shrink: 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport const DoneButton = styled(Button)`\r\n  background-color: #197a1e;\r\n\r\n  &:hover {\r\n    background-color: hsl(123, 66%, 39%);\r\n    transition: 0.15s;\r\n  }\r\n`;\r\n\r\nexport const RemoveButton = styled(Button)`\r\n  background-color: #ec2539;\r\n\r\n  &:hover {\r\n    background-color: hsl(354, 84%, 64%);\r\n    transition: 0.15s;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {List, Item, Content, DoneButton, RemoveButton} from \"./styled\";\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\r\n  <List>\r\n    {tasks.map((task) => (\r\n      <Item key={task.id} hidden={task.done && hideDone}>\r\n        <DoneButton onClick={() => toggleTaskDone(task.id)}>\r\n          {task.done ? \"âœ”\" : \"\"}\r\n        </DoneButton>\r\n        <Content done={task.done}>{task.content}</Content>\r\n        <RemoveButton onClick={() => removeTask(task.id)}>ðŸ—‘</RemoveButton>\r\n      </Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default Tasks;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: inherit;\r\n  border: none;\r\n  padding: 0;\r\n  margin: 0 40px;\r\n  color: teal;\r\n  transition: 0.2ss ease-out;\r\n\r\n  &:disabled {\r\n    color: rgb(196, 195, 195);\r\n  }\r\n\r\n  &:hover {\r\n    color: hsl(180, 100%, 40%);\r\n  }\r\n\r\n  @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n    flex-basis: 100%;\r\n    margin: 10px 0;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {ButtonsContainer, Button} from \"./styled\";\r\n\r\nconst Buttons = ({tasks, hideDone, toggleHideDone, setAllDone}) =>\r\n  tasks.length > 0 && (\r\n    <ButtonsContainer>\r\n      <Button onClick={toggleHideDone}>\r\n        {hideDone ? \"Show\" : \"Hide\"} done tasks\r\n      </Button>\r\n      <Button onClick={setAllDone} disabled={tasks.every(({done}) => done)}>\r\n        Mark all as done\r\n      </Button>\r\n    </ButtonsContainer>\r\n  );\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n  <section className=\"section\">\r\n    <section className=\"section__header\">\r\n      <h2 className=\"section__title\">{title}</h2>\r\n      {extraHeaderContent}\r\n    </section>\r\n    {body}\r\n  </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({title}) => <h1 className=\"section__header--main\">{title}</h1>;\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n  max-width: 1200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  padding: 0 15px;\r\n`;\r\n","import React from \"react\";\r\nimport {Main} from \"./styled\";\r\n\r\nconst Container = ({children}) => <Main>{children}</Main>;\r\n\r\nexport default Container;\r\n","import {useState, useEffect} from \"react\";\r\n\r\nexport const useLocalStorage = (keyName, initialValue) => {\r\n  const getInitialState = () => {\r\n    const localStorageState = localStorage.getItem(keyName);\r\n\r\n    return localStorageState === null\r\n      ? initialValue\r\n      : JSON.parse(localStorageState);\r\n  };\r\n\r\n  const [state, setState] = useState(getInitialState);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(keyName, JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  return [state, setState];\r\n};\r\n","import React from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport {useTasks} from \"./useTasks\";\n\nfunction App() {\n  const {\n    tasks,\n    hideDone,\n    toggleHideDone,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n  } = useTasks();\n\n  return (\n    <Container>\n      <Header title=\"ToDo List\" />\n      <Section title=\"Add new task\" body={<Form addNewTask={addNewTask} />} />\n      <Section\n        title=\"Task List\"\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","import {useLocalStorage} from \"./useLocalStorage\";\r\n\r\nexport const useTasks = () => {\r\n  const [tasks, setTasks] = useLocalStorage(\"tasks\", []);\r\n\r\n  const [hideDone, setHideDone] = useLocalStorage(\"hideDone\", false);\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone((hideDone) => !hideDone);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks((tasks) =>\r\n      tasks.map((task) =>\r\n        task.id === id ? {...task, done: !task.done} : task,\r\n      ),\r\n    );\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks((tasks) => tasks.map((task) => ({...task, done: true})));\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks((tasks) => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return {\r\n    tasks,\r\n    hideDone,\r\n    toggleHideDone,\r\n    removeTask,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    addNewTask,\r\n  };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {GlobalStyle} from \"./GlobalStyle\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {theme} from \"./theme\";\nimport {ThemeProvider} from \"styled-components\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\r\n  colors: {\r\n    white: \"#ffffff\",\r\n    teal: \"teal\",\r\n  },\r\n\r\n  breakpoints: {\r\n    mobile: 767,\r\n  },\r\n};\r\n"],"sourceRoot":""}