{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","placeholder","Tasks","tasks","hideDoneTasks","map","task","done","content","Buttons","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAUeA,G,UAPF,kBACX,0BAAMC,UAAU,iBACd,2BAAOA,UAAU,iBAAiBC,YAAY,2BAC9C,4BAAQD,UAAU,gBAAlB,eCcWE,G,MAjBD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,cAAT,OACZ,wBAAIJ,UAAU,iBACXG,EAAME,KAAI,SAACC,GAAD,OACT,wBACEN,UAAS,oBACPM,EAAKC,MAAQH,EAAgB,uBAAyB,KAExD,4BAAQJ,UAAU,kBAAkBM,EAAKC,KAAO,SAAM,IACtD,uBAAGP,UAAS,oBAAeM,EAAKC,KAAO,oBAAsB,KAC1DD,EAAKE,SAER,4BAAQR,UAAU,mBAAlB,uBCGOS,G,MAdC,SAAC,GAAD,IAAEN,EAAF,EAAEA,MAAOC,EAAT,EAASA,cAAT,OACdD,EAAMO,OAAS,GACb,yBAAKV,UAAU,WACb,4BAAQA,UAAU,mBACfI,EAAgB,OAAS,OAD5B,eAGA,4BACEJ,UAAU,kBACVW,SAAUR,EAAMS,OAAM,qBAAEL,SAF1B,uBCISM,G,MAVC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,mBAAf,OACd,6BAAShB,UAAU,WACjB,6BAASA,UAAU,mBACjB,wBAAIA,UAAU,kBAAkBc,GAC/BE,GAEFD,KCLUE,EAFA,SAAC,GAAD,IAAEH,EAAF,EAAEA,MAAF,OAAa,wBAAId,UAAU,yBAAyBc,ICGpDI,G,MAFG,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAAgB,0BAAMnB,UAAU,aAAamB,KCKzDhB,EAAQ,CACZ,CAACiB,GAAI,EAAGZ,QAAS,8BAAqBD,MAAM,GAC5C,CAACa,GAAI,EAAGZ,QAAS,wBAAeD,MAAM,IAuBzBc,MAlBf,WACE,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQP,MAAM,cACd,kBAAC,EAAD,CAASA,MAAM,eAAeC,KAAM,kBAAC,EAAD,QACpC,kBAAC,EAAD,CACED,MAAM,YACNE,mBACE,kBAAC,EAAD,CAASb,MAAOA,EAAOC,eAXb,IAaZW,KAAM,kBAAC,EAAD,CAAOZ,MAAOA,EAAOC,eAbf,SCDFkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f4b32f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = () => (\r\n  <form className=\"section__form\">\r\n    <input className=\"section__input\" placeholder=\"What needs to be done?\" />\r\n    <button className=\"section__btn\">Add task</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDoneTasks}) => (\r\n  <ul className=\"section__list\">\r\n    {tasks.map((task) => (\r\n      <li\r\n        className={`task__item${\r\n          task.done && hideDoneTasks ? \" tasks__item--hidden\" : \"\"\r\n        }`}>\r\n        <button className=\"list__doneBtn \">{task.done ? \"âœ”\" : \"\"}</button>\r\n        <p className={`list__task${task.done ? \" list__task--done\" : \"\"}`}>\r\n          {task.content}\r\n        </p>\r\n        <button className=\"list__removeBtn\">ðŸ—‘</button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({tasks, hideDoneTasks}) =>\r\n  tasks.length > 0 && (\r\n    <div className=\"buttons\">\r\n      <button className=\"buttons__button\">\r\n        {hideDoneTasks ? \"Show\" : \"Hide\"} done tasks\r\n      </button>\r\n      <button\r\n        className=\"buttons__button\"\r\n        disabled={tasks.every(({done}) => done)}>\r\n        Mark all as done\r\n      </button>\r\n    </div>\r\n  );\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n  <section className=\"section\">\r\n    <section className=\"section__header\">\r\n      <h2 className=\"section__title\">{title}</h2>\r\n      {extraHeaderContent}\r\n    </section>\r\n    {body}\r\n  </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({title}) => <h1 className=\"section__header--main\">{title}</h1>;\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({children}) => <main className=\"container\">{children}</main>;\r\n\r\nexport default Container;\r\n","import React from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\n\nconst tasks = [\n  {id: 1, content: \"przejÅ›Ä‡ na Reacta\", done: false},\n  {id: 2, content: \"zjeÅ›Ä‡ obiad\", done: true},\n];\n\nconst hideDoneTasks = false;\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <Header title=\"ToDo List\" />\n        <Section title=\"Add new task\" body={<Form />} />\n        <Section\n          title=\"Task List\"\n          extraHeaderContent={\n            <Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} />\n          }\n          body={<Tasks tasks={tasks} hideDoneTasks={hideDoneTasks} />}\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}